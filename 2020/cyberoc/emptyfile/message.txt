# 1 = 0x0A0A
# 2 = 0x0A20 || 0x2009 || 0x200A || 0x2020   (? > 0x0A0A)
# 3 = 0x090A
# 4 = 0x0920 || 0x0A09   (? > 0x090A)
# 5 = none ("IMPOSSIBLE")
# 6 = 0x0909


# global variable initialize
s = [0 for i in range(16386)]
idx = 0x0
v12 = 0x3fff
v15 = 0x0
v16 = 0x0
v17 = 0x0



def sub_95A(buf, file_size):
    global idx

    v5 = 0
    while file_size > idx:
        v4 = buf[idx]
        idx += 1
        if v4 == 0x9:
            v5 = (2 * v5) | 1
        else:
            if v4 != 0x20:
                return v5
            v5 *= 2
    return v5

def sub_0A0A():
    global v12
    
    if v12 > 0x3FFE:
        print 'Error'
        exit(-1)
    v12 += 1

def sub_2009():
    global s, v12, v15, v16

    if v12 > 0x3FFD:
        print 'Error'
        exit(-1)
    v12 += 1
    v15 = s[v12]
    v12 += 1
    v16 = s[v12]
    v6 = v12
    v12 -= 1
    s[v6] = v15 - v16

def sub_200A():
    global s, idx, v12, v15, v17
    
    if v12 > 0x3FFE:
        print 'Error'
        exit(-1)
    v12 += 1
    v15 = s[v12]
    v17 = sub_95A(buf, file_size)
    if not v15:
        idx = v17

def sub_2020():
    global s, v12, v15, v16

    if v12 > 0x3FFD:
        print 'Error'
        exit(-1)
    v12 += 1
    v15 = s[v12]
    v12 += 1
    v16 = s[v12]
    v5 = v12
    v12 -= 1
    s[v5] = v15 + v16

def sub_0A20():
    global s, v12, v15

    if v12 > 0x3FFE:
        print 'Error'
        exit(-1)
    v15 = s[v12 + 1]
    v9 = v12
    v12 -= 1
    s[v9] = v15

def sub_090A():
    global s, v12, v15

    v15 = sub_95A(buf, file_size)
    v8 = v12
    v12 -= 1
    s[v8] = v15

def sub_0920():
    global s, v12, v15, v16

    if v12 > 0x3FFD:
        print 'Error'
        exit(-1)
    v12 += 1
    v15 = s[v12]
    v12 += 1
    v16 = s[v12]
    s[v15] = v16

def sub_0A09():
    global s, v12, v15
    
    if v12 > 0x3FFD:
        print 'Error'
        exit(-1)
    v15 = s[v12 + 1]
    s[v12 + 1] = s[v12 + 2]
    s[v12 + 2] = v15

def sub_0909():
    global s, v12, v15
    
    if v12 > 0x3FFE:
        print 'Error'
        exit(-1)
    v12 += 1
    v15 = s[v12]
    v7 = v12
    v12 -= 1
    s[v7] = s[v15]

def none():
    print "IMPOSSIBLE"

def final():
    global s, v12

    if v12 <= 0x3ffe:
        result = s[v12 + 1]
    else:
        print 'Error'
        exit(-1)
    return result




# 'code.txt' initialize
f = open('C:\\Users\\joeun\\Downloads\\emptyfile_114743654ba82f33c0eac4fca6fce895\\code.txt', 'rb')
buf = f.read()
f.close()
file_size = len(buf)

# user_input initialize
user_input = 'a' * 58
for i in range(len(user_input)):
    s[i] = ord(user_input[i])

# Start Routine
while idx >= 0 and file_size > idx + 2:
    byte_2 = buf[idx + 1].encode('hex') + buf[idx].encode('hex')    # little-endian
    idx += 2

    if byte_2 == '0a0a':        # case 1
        sub_0A0A()
    elif byte_2 == '2009':      # case 2
        sub_2009()
    elif byte_2 == '200a':      # case 3
        sub_200A()
    elif byte_2 == '2020':      # case 4
        sub_2020()
    elif byte_2 == '0a20':      # case 5
        sub_0A20()
    elif byte_2 == '090a':      # case 6
        sub_090A()
    elif byte_2 == '0920':      # case 7
        sub_0920()
    elif byte_2 == '0a09':      # case 8
        sub_0A09()
    elif byte_2 == '0909':      # case 9
        sub_0909()
    else:              # impossible
        none()

result = final()
print 'Exit Code:', result